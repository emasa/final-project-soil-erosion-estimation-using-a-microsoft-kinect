
#include "gtest/gtest.h"

#include "features/descriptor_types.h"
#include "features/descriptor_representations.h"

TEST(RepresentationTest, BinaryRepresentationTest)
{
	std::vector<unsigned char> vowels = {'a', 'e', 'i', 'o', 'u'}, expected;

	CustomSizeBinaryDescriptor bin_descriptor(5);
	bin_descriptor.descriptor = vowels;

	// empty descriptor representation
	expected = std::vector<unsigned char>();
	CustomSizeBinaryDescriptorRepresentation bin_rep0(0);	
	bin_rep0.copyToBinaryArray(bin_descriptor, expected.data());
	EXPECT_EQ(std::vector<unsigned char>(), expected);

	// unary descriptor representation
	expected = std::vector<unsigned char>(1);
	CustomSizeBinaryDescriptorRepresentation bin_rep1(1);	
	bin_rep1.copyToBinaryArray(bin_descriptor, expected.data());	
	EXPECT_EQ(std::vector<unsigned char>{static_cast<unsigned char>('a')}, expected);

	// variable len (len=5) descriptor representation
	expected = std::vector<unsigned char>(5);
	CustomSizeBinaryDescriptorRepresentation bin_rep5(5);
	bin_rep5.copyToBinaryArray(bin_descriptor, expected.data());
	EXPECT_EQ(vowels, expected);
}

TEST(RepresentationTest, RealRepresentationTest)
{
	std::vector<float> numbers = {1.f, 2.f, 3.f, 4.f, 5.f}, expected;

	CustomSizeRealDescriptor real_descriptor(5);
	real_descriptor.descriptor = numbers;

	// empty descriptor representation
	expected = std::vector<float>();
	CustomSizeDescriptorRepresentation real_rep0(0);	
	real_rep0.copyToFloatArray(real_descriptor, expected.data());
	EXPECT_EQ(std::vector<float>(), expected);

	// unary descriptor representation
	expected = std::vector<float>(1);
	CustomSizeDescriptorRepresentation real_rep1(1);	
	real_rep1.copyToFloatArray(real_descriptor, expected.data());	
	EXPECT_EQ(std::vector<float>{1.f}, expected);

	// variable len (len=5) descriptor representation
	expected = std::vector<float>(5);
	CustomSizeDescriptorRepresentation real_rep5(5);
	real_rep5.copyToFloatArray(real_descriptor, expected.data());
	EXPECT_EQ(numbers, expected);
}

// autogenerated main linking with gtest_main